# USED FOR LOCAL DEVELOPMENT ONLY.
# SEE: https://github.com/BretFisher/node-docker-good-defaults
# SEE: https://github.com/kyhsa93/nestjs-rest-cqrs-example
# SEE: https://github.com/ArturKisov/nestjs-mysql-starter

version: '3.9'

services:
  adminer:
    container_name: adminer
    image: adminer
    environment:
      ADMINER_DESIGN: dracula
      ADMINER_PLUGINS:
        dump-alter dump-date dump-json edit-foreign email-table enum-option
        enum-types file-upload foreign-system table-indexes-structure
        table-structure tables-filter
    ports:
      - ${ADMINER_PORT}:8080
    privileged: true
    restart: always
    volumes:
      - ./db/data:/db/data
      - ./db/public/plugins-enabled/login-password-less.php:/var/www/html/plugins-enabled/login-password-less.php
  app:
    container_name: app
    # NOTE: Used to enhance DX ONLY. Production image is prefixed by ghcr.io/
    image: flex-development/sneusers
    build:
      args:
        GH_PAT: ${GH_PAT}
        NODE_ENV: ${NODE_ENV}
        NPM_TOKEN: ${NPM_TOKEN}
        PORT: ${PORT}
      context: .
      dockerfile: ./Dockerfile
      target: runner
    depends_on:
      - redis
    environment:
      CACHE_MAX: ${CACHE_MAX}
      CACHE_TTL: ${CACHE_TTL}
      DB_AUTO_LOAD_MODELS: ${DB_AUTO_LOAD_MODELS}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DEBUG: ${DEBUG}
      DEBUG_COLORS: ${DEBUG_COLORS}
      EMAIL_CLIENT: ${EMAIL_CLIENT}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_SEND_AS: ${EMAIL_SEND_AS}
      EMAIL_PRIVATE_KEY: ${EMAIL_PRIVATE_KEY}
      EMAIL_USER: ${EMAIL_USER}
      GH_PAT: ${GH_PAT}
      HOST: ${HOST}
      HOSTNAME: ${HOSTNAME}
      JWT_EXP_ACCESS: ${JWT_EXP_ACCESS}
      JWT_EXP_REFRESH: ${JWT_EXP_REFRESH}
      JWT_EXP_VERIFY: ${JWT_EXP_VERIFY}
      JWT_SECRET_ACCESS: ${JWT_SECRET_ACCESS}
      JWT_SECRET_REFRESH: ${JWT_SECRET_REFRESH}
      JWT_SECRET_VERIFY: ${JWT_SECRET_VERIFY}
      NEST_DEBUG: ${NEST_DEBUG}
      NODE_ENV: ${NODE_ENV}
      NPM_TOKEN: ${NPM_TOKEN}
      PORT: ${PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      THROTTLE_LIMIT: ${THROTTLE_LIMIT}
      THROTTLE_TTL: ${THROTTLE_TTL}
    links:
      - redis:${REDIS_HOST}
    ports:
      - ${PORT}:${PORT}
      - 9229:9229
    restart: always
    volumes:
      - ./db/config:/opt/sneusers/db/config
      - ./db/data:/opt/sneusers/db/data
      - ./db/migrations:/opt/sneusers/db/migrations
      - ./db/seeders:/opt/sneusers/db/seeders
      - ./src:/opt/sneusers/src
      - ./typings:/opt/sneusers/typings
      - ./views:/opt/sneusers/views
      - ./tsconfig.app.json:/opt/sneusers/tsconfig.app.json
      - ./tsconfig.json:/opt/sneusers/tsconfig.json
    working_dir: /opt/sneusers
  nginx:
    container_name: nginx
    image: nginx:alpine-perl
    command: ['nginx-debug', '-g', 'daemon off;']
    environment:
      ADMINER_PORT: 8080
      ADMINER_SERVER_NAME: ${ADMINER_SERVER_NAME}
      PORT: ${PORT}
      REDIS_PORT: 8081
      REDIS_SERVER_NAME: ${REDIS_SERVER_NAME}
      SERVER_NAME: ${SERVER_NAME}
    depends_on:
      - adminer
      - app
      - redis-commander
    links:
      - adminer:adminer
      - app:app
      - redis-commander:redis-commander
    ports:
      - 443:443
      - 80:80
    restart: always
    tty: true
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/general.conf:/etc/nginx/general.conf
      - ./nginx/mime.types:/etc/nginx/mime.types
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/proxy.conf:/etc/nginx/proxy.conf
      - ./nginx/security.conf:/etc/nginx/security.conf
      - ./nginx/ssl-params.conf:/etc/nginx/ssl-params.conf
      - ./nginx/ssl.conf:/etc/nginx/ssl.conf
      - /etc/nginx/conf.d:/etc/nginx/conf.d
      - /etc/nginx/logs:/etc/nginx/logs
      - /etc/nginx/run:/etc/nginx/run
  redis:
    container_name: ${REDIS_HOST}
    image: redis:alpine
    ports:
      - ${REDIS_PORT}:6379
    restart: always
  redis-commander:
    container_name: redis-commander
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:${REDIS_PORT}
    depends_on:
      - redis
    ports:
      - ${REDIS_COMMANDER_PORT}:8081
    restart: always
