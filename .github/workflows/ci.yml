# Continuous Integration
#
# References:
#
# - https://docs.github.com/actions/using-containerized-services/creating-postgresql-service-containers
# - https://github.com/actions/checkout
# - https://github.com/actions/setup-node
# - https://github.com/DopplerHQ/cli-action

---
name: ci
on:
  pull_request:
  push:
    branches:
      - next
      - push-action/**
  workflow_dispatch:
jobs:
  ci:
    runs-on: ubuntu-latest
    container: node:latest
    env:
      GH_PAT: ${{ secrets.PAT_GPR_ADMIN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN_ADMIN }}
    strategy:
      matrix:
        node: [14.13.1]
    services:
      postgres:
        image: postgres:14.2
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
        options: >-
          --health-cmd pg_isready  
          --health-interval 10s  
          --health-timeout 5s  
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"  
          --health-interval 10s  
          --health-timeout 5s  
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - id: checkout
        name: Checkout branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - id: node
        name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          scope: '@${{ github.repository_owner }}'
      - id: install-deps
        name: Install dependencies
        run: yarn --immutable
        env:
          NODE_AUTH_TOKEN: ${GH_PAT}
      - id: doppler-cli
        name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1
      - id: check-format
        name: Check code formatting
        run: yarn check:format
      - id: check-style
        name: Check code style
        run: yarn check:style
      - id: test
        name: Run test suites
        run: yarn test:ci
        env:
          DOPPLER_CONFIG: ci
          DOPPLER_ENVIRONMENT: ci
          DOPPLER_PROJECT: ${{ secrets.DOPPLER_PROJECT }}
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_CI }}
      - id: build
        name: Build project
        run: doppler run --command="yarn build:app"
        env:
          DOPPLER_CONFIG: ci
          DOPPLER_ENVIRONMENT: ci
          DOPPLER_PROJECT: ${{ secrets.DOPPLER_PROJECT }}
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_CI }}
